# Some notes from pydoc / online search

If the syntax *expression appears in the function call, expression must evaluate to an iterable. Elements from these iterables are treated as if they were additional positional arguments. For the call f(x1, x2, *y, x3, x4), if y evaluates to a sequence y1, …, yM, this is equivalent to a call with M+4 positional arguments x1, x2, y1, …, yM, x3, x4.
A good example would be to flip a matrix below:
>>> a = [
...     [1,2,3],
...     [4,5,6],
...     [7,8,9],
...     [0,1,2]
... ]
>>> [list(t) for t in list(zip(*a))]
[[1, 4, 7, 0], [2, 5, 8, 1], [3, 6, 9, 2]]

Data member, or field, or member variable should not be defined in class, otherwise they are class variables:
>>> class Foo:
...     class_var = 0
Also if an instance only have class vars, it'll be reused.

Loop through multiple lists using zip():
>>> a = [1,2,3]
>>> b = [3,4,5]
>>> for i,j in zip(a, b):
...     print(i, j)
...
1 3
2 4
3 5
>>> for i,j in zip(a, b):
...     print( i - j)
...
-2
-2
-2
>>>

Generators are defined using yield:
>>> def foo():
...     for i in range(10):
...             yield i
...             yield i+1
...
>>> it = foo()
>>> next(it)
0
>>> next(it)
1
>>> next(it)
1
>>> next(it)
2
>>> next(it)
2
>>> next(it)
3
>>> next(it)
3
>>> next(it)
4
